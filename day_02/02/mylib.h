#ifndef MYLIBRARY_H
#define MYLIBRARY_H

void arr_sort (int* arr, int size);
// Предусловие: массив создан, заполнен значениями, переменная size содержит размер массива
// Постусловие: массив отсортирован по возрастанию

void compar (int* arr_1, int* arr_2, int size);
// Предусловие: массивы заполнены значениями, отсортированными по возрастанию, переменная size содержит размер массивов
// Постусловие: массив arr_1 заполнен разностью значений элементов двух массивов, взтых по модулю

int summ (int* arr_1, int size);
// Предусловие: массив содержит значения
// Постусловие: функция возвращает сумму всех элементов массива

int counter_function(int number, int* arr_2, int size);
// Предусловие: переменная number содержит число, встречаемость которого нужно найти 
// во втором массиве, массив arr_2 заполнен значениями, переменная size содержит размер массива 

int test_increase_decrease (int* arr, int size);
// Предусловие: массив arr содержит значения, переменная size содержит размер массива
// Постусловие: функция возвращает true, если массив возрастает или убывает и false в противном случае

int test_diff_of_elements (int* arr, int size);
// Предусловие: массив arr содержит значения, переменная size содержит размер массива
// Постусловие: функция возвращает true если два соседних элемента отличаются не менее чем на один и не более чем на три
// в противном случае - false

void Remove_by_index (int* arr, int& size, int index);
// Предусловие: массив arr содержит значения, переменная size содержит размер массива, index содержит индекс элемента, который нужно 
// убрать из массива
// Постусловие: из массив arr исключен элемент под индексом index,  размер size уменьшен на 1

int Violating_Element(int* arr, int& size);
// Предусловие: массив arr содержит значения, переменная size содержит размер массива
// Функция возвращает индекс элемента массива, нарущающего монотонность, если массив мнонотонный, возвращает 0

int Double_element_Test(int* arr, int size);
// Предусловие: массив arr содержит значения, переменная size содержит размер массива
// Постусловие: выводит интекс повторяющегося элемента массива, если повторов нет - выводит 0

int createAndProcessArrays(int* originalArray, int arraySize, int index);
// Предусловие: массив originalArray содержит массив, в котором замечен элемент, отличающийся от следующего более чем на 3,
// arraySize содержит размер массива, index содержит номер элемента, который отличается от следующего более чем на 3
// Постусловие: функция возвращает номер элемента массива, который необходимо исключить, чтобы элементы массива не отличались
// друг от друга более чем на 3, если качестве индекса передан -1, то функция вернет -1



// Вспомогательные функции
void printArrays(int arr[], int size);

bool compareArrays(const int* arr1, const int* arr2, size_t size);

#endif // MYLIBRARY_H